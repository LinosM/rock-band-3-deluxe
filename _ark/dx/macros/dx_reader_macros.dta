#define DX_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/dx.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx.dta" #endif
)
#define MOD_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/mod.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/mod.dta" #endif
)
#define VAL_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/val.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/val.dta" #endif
)
#define DRP_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/discordrp.json" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/discordrp.json" #endif
)
#define LOG_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/log.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/log.dta" #endif
)
#define CURRENT_SONG_TXT_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/currentsong.txt" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/currentsong.txt" #endif
)
#define CURRENT_SONG_JSON_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/currentsong.json" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/currentsong.json" #endif
)
#define PREV_LOG_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/last_log.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/last_log.dta" #endif
)
#define MENU_BACKGROUND_BIK_PATH
(
   #ifdef HX_XBOX "GAME:/main_background.bik" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/main_background.bik" #endif
)
#define DX_BOOT_FILE_CHECKER
(
   #ifndef HX_WII
   {$this check_dx}
   {$this check_xeniawrites}
   #endif
)
#define DX_BOOT_FILE_HANDLERS
(
   (check_dx
      {unless {file_exists DX_FILE_PATH}
         {unless $dxwelcomeseen
            {dx_log_writer FALSE {sprint "Cannot find DX.dta"}}
            {ui push_screen hint_dx_welcome_screen}
         }
      }
   )
   (check_xeniawrites
      {unless {file_exists DX_FILE_PATH}
         {if $dxwelcomeseen
            {unless $dx_settings_error
               {dx_log_writer FALSE {sprint "Cannot write DX.dta"}}
               {ui push_screen hint_relative_writes_screen}
            }
         }
      }
   )
)
#define INIT_DX_READER
(
   #ifndef HX_WII
   {dx_log_writer FALSE {sprint "Attempting to read dx.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {foreach $entry {read_file DX_FILE_PATH}
      {if {== {elem $entry 0} {basename mtv_position}}
         {set $mtvpos_0
            {elem {find $entry mtv_position} 1}
         }
         {set $mtvpos_1
            {elem {find $entry mtv_position} 2}
         }
         {set $mtvpos_2
            {elem {find $entry mtv_position} 3}
         }
      }
      {if {== {elem $entry 0} {basename practice_speed_control_pos}}
         {set $speed_controlpos_0
            {elem {find $entry practice_speed_control_pos} 1}
         }
         {set $speed_controlpos_1
            {elem {find $entry practice_speed_control_pos} 2}
         }
         {set $speed_controlpos_2
            {elem {find $entry practice_speed_control_pos} 3}
         }
      }
      {if {== {elem $entry 0} {basename practice_score_pos}}
         {set $scorepos_0
            {elem {find $entry practice_score_pos} 1}
         }
         {set $scorepos_1
            {elem {find $entry practice_score_pos} 2}
         }
         {set $scorepos_2
            {elem {find $entry practice_score_pos} 3}
         }
      }
      {if {== {elem $entry 0} {basename practice_all_item_pos}}
         {set $all_itempos_0
            {elem {find $entry practice_all_item_pos} 1}
         }
         {set $all_itempos_1
            {elem {find $entry practice_all_item_pos} 2}
         }
         {set $all_itempos_2
            {elem {find $entry practice_all_item_pos} 3}
         }
      }
      {if {== {elem $entry 0} {basename practice_section_pos}}
         {set $sectionpos_0
            {elem {find $entry practice_section_pos} 1}
         }
         {set $sectionpos_1
            {elem {find $entry practice_section_pos} 2}
         }
         {set $sectionpos_2
            {elem {find $entry practice_section_pos} 3}
         }
      }
      {if {== {elem $entry 0} {basename scoreboard_pos}}
         {set $scoreboardpos_0
            {elem {find $entry scoreboard_pos} 1}
         }
         {set $scoreboardpos_1
            {elem {find $entry scoreboard_pos} 2}
         }
         {set $scoreboardpos_2
            {elem {find $entry scoreboard_pos} 3}
         }
      }
      {if {== {elem $entry 0} {basename star_display_pos}}
         {set $star_displaypos_0
            {elem {find $entry star_display_pos} 1}
         }
         {set $star_displaypos_1
            {elem {find $entry star_display_pos} 2}
         }
         {set $star_displaypos_2
            {elem {find $entry star_display_pos} 3}
         }
      }
      {if {== {elem $entry 0} {basename gem_colors}}
         {set $dx_slot1_color
            {elem {find $entry gem_colors} 1}
         }
         {set $dx_slot2_color
            {elem {find $entry gem_colors} 2}
         }
         {set $dx_slot3_color
            {elem {find $entry gem_colors} 3}
         }
         {set $dx_slot4_color
            {elem {find $entry gem_colors} 4}
         }
         {set $dx_slot5_color
            {elem {find $entry gem_colors} 5}
         }
      }
      {if {== {elem $entry 0} {basename sustain_colors}}
         {set $dx_sustain1_color
            {elem {find $entry sustain_colors} 1}
         }
         {set $dx_sustain2_color
            {elem {find $entry sustain_colors} 2}
         }
         {set $dx_sustain3_color
            {elem {find $entry sustain_colors} 3}
         }
         {set $dx_sustain4_color
            {elem {find $entry sustain_colors} 4}
         }
         {set $dx_sustain5_color
            {elem {find $entry sustain_colors} 5}
         }
      }
      {if {== {elem $entry 0} {basename smasher_colors}}
         {set $dx_fret1_color
            {elem {find $entry smasher_colors} 1}
         }
         {set $dx_fret2_color
            {elem {find $entry smasher_colors} 2}
         }
         {set $dx_fret3_color
            {elem {find $entry smasher_colors} 3}
         }
         {set $dx_fret4_color
            {elem {find $entry smasher_colors} 4}
         }
         {set $dx_fret5_color
            {elem {find $entry smasher_colors} 5}
         }
      }
      {if {== {elem $entry 0} {basename drum_smasher_colors}}
         {set $dx_smasher1_color
            {elem {find $entry drum_smasher_colors} 1}
         }
         {set $dx_smasher2_color
            {elem {find $entry drum_smasher_colors} 2}
         }
         {set $dx_smasher3_color
            {elem {find $entry drum_smasher_colors} 3}
         }
         {set $dx_smasher4_color
            {elem {find $entry drum_smasher_colors} 4}
         }
      }
      {if {== {elem $entry 0} {basename drum_tom_colors}}
         {set $dx_drum1_color
            {elem {find $entry drum_tom_colors} 1}
         }
         {set $dx_drum2_color
            {elem {find $entry drum_tom_colors} 2}
         }
         {set $dx_drum3_color
            {elem {find $entry drum_tom_colors} 3}
         }
         {set $dx_drum4_color
            {elem {find $entry drum_tom_colors} 4}
         }
      }
      {if {== {elem $entry 0} {basename drum_cymbal_color}}
         {set $dx_cymbal1_color
            {elem {find $entry drum_cymbal_color} 1}
         }
         {set $dx_cymbal2_color
            {elem {find $entry drum_cymbal_color} 2}
         }
         {set $dx_cymbal3_color
            {elem {find $entry drum_cymbal_color} 3}
         }
         {set $dx_cymbal4_color
            {elem {find $entry drum_cymbal_color} 4}
         }
      }
      {if {== {elem $entry 0} {basename dx_kick_color}}
         {set $dx_kick_color
            {elem {find $entry dx_kick_color} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_main_menu_background}}
         {set $dx_main_menu_background
            {elem {find $entry dx_main_menu_background} 1}
         }
      }
      {if {== {elem $entry 0} {basename emulate_fps}}
         {set $emulatefps
            {elem {find $entry emulate_fps} 1}
         }
      }
      {if {== {elem $entry 0} {basename track_speed}}
         {set $trackspeed
            {elem {find $entry track_speed} 1}
         }
      }
      {if {== {elem $entry 0} {basename song_speed}}
         {set $speedmod
            {elem {find $entry song_speed} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_animated_gem}}
         {set $dx_animated_gem
            {elem {find $entry dx_animated_gem} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_gem}}
         {set $dx_gem
            {elem {find $entry dx_gem} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_smasher}}
         {set $dx_smasher
            {elem {find $entry dx_smasher} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_crowd_meter}}
         {set $dx_crowd_meter
            {elem {find $entry dx_crowd_meter} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_multiplier_ring}}
         {set $dx_multiplier_ring
            {elem {find $entry dx_multiplier_ring} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_overdrive_bar}}
         {set $dx_overdrive_bar
            {elem {find $entry dx_overdrive_bar} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_rails}}
         {set $dx_rails
            {elem {find $entry dx_rails} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_score}}
         {set $dx_score
            {elem {find $entry dx_score} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_flames}}
         {set $dx_flames
            {elem {find $entry dx_flames} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_vocal_arrow}}
         {set $dx_vocal_arrow
            {elem {find $entry dx_vocal_arrow} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_vocal_highway}}
         {set $dx_vocal_highway
            {elem {find $entry dx_vocal_highway} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_keyboard}}
         {set $dx_keyboard
            {elem {find $entry dx_keyboard} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_emissive_color}}
         {set $dx_emissive_r
            {elem {find $entry dx_emissive_color} 1}
         }
         {set $dx_emissive_g
            {elem {find $entry dx_emissive_color} 2}
         }
         {set $dx_emissive_b
            {elem {find $entry dx_emissive_color} 3}
         }
      }
      {if {== {elem $entry 0} {basename dx_emissive_guitar}}
         {set $dx_emissive_guitar
            {elem {find $entry dx_emissive_guitar} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_emissive_bass}}
         {set $dx_emissive_bass
            {elem {find $entry dx_emissive_bass} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_emissive_drum}}
         {set $dx_emissive_drum
            {elem {find $entry dx_emissive_drum} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_emissive_keys}}
         {set $dx_emissive_keys
            {elem {find $entry dx_emissive_keys} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_spotlight_guitar}}
         {set $dx_spotlight_guitar
            {elem {find $entry dx_spotlight_guitar} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_spotlight_bass}}
         {set $dx_spotlight_bass
            {elem {find $entry dx_spotlight_bass} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_spotlight_drum}}
         {set $dx_spotlight_drum
            {elem {find $entry dx_spotlight_drum} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_spotlight_keys}}
         {set $dx_spotlight_keys
            {elem {find $entry dx_spotlight_keys} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_highway_guitar}}
         {set $dx_highway_guitar
            {elem {find $entry dx_highway_guitar} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_highway_bass}}
         {set $dx_highway_bass
            {elem {find $entry dx_highway_bass} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_highway_drum}}
         {set $dx_highway_drum
            {elem {find $entry dx_highway_drum} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_highway_keys}}
         {set $dx_highway_keys
            {elem {find $entry dx_highway_keys} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_multiangle}}
         {set $dx_multiangle
            {elem {find $entry dx_multiangle} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_long_mtv_delay}}
         {set $dx_long_mtv_delay
            {elem {find $entry dx_long_mtv_delay} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_currentsong_prefix}}
         {set $dx_currentsong_prefix
            {elem {find $entry dx_currentsong_prefix} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_artist_mtv_line}}
         {set $dx_artist_mtv_line
            {elem {find $entry dx_artist_mtv_line} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_fullcombo_sound}}
         {set $dx_fullcombo_sound
            {elem {find $entry dx_fullcombo_sound} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_jurgen_sound}}
         {set $dx_jurgen_sound
            {elem {find $entry dx_jurgen_sound} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_nice_sound}}
         {set $dx_nice_sound
            {elem {find $entry dx_nice_sound} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_song_select_noise}}
         {set $dx_song_select_noise
            {elem {find $entry dx_song_select_noise} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_instrument_fx}}
         {set $dx_instrument_fx
            {elem {find $entry dx_instrument_fx} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_year_on_mtv}}
         {set $dx_year_on_mtv
            {elem {find $entry dx_year_on_mtv} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_year_on_one_mtv_line}}
         {set $dx_year_on_one_mtv_line
            {elem {find $entry dx_year_on_one_mtv_line} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_album_mtv_line}}
         {set $dx_album_mtv_line
            {elem {find $entry dx_album_mtv_line} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_song_title_mtv_line}}
         {set $dx_song_title_mtv_line
            {elem {find $entry dx_song_title_mtv_line} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_author_finder}}
         {set $dx_author_finder
            {elem {find $entry dx_author_finder} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_genre_mtv_line}}
         {set $dx_genre_mtv_line
            {elem {find $entry dx_genre_mtv_line} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_game_origin_mtv_line}}
         {set $dx_game_origin_mtv_line
            {elem {find $entry dx_game_origin_mtv_line} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_author_mtv_line}}
         {set $dx_author_mtv_line
            {elem {find $entry dx_author_mtv_line} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_author_mtv_line}}
         {set $dx_author_mtv_line
            {elem {find $entry dx_author_mtv_line} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_rb3dx_venue}}
         {set $venue
            {elem {find $entry dx_rb3dx_venue} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_joypad_type_guitar}}
         {set $dx_joypad_type_guitar
            {elem {find $entry dx_joypad_type_guitar} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_joypad_type_keys}}
         {set $dx_joypad_type_keys
            {elem {find $entry dx_joypad_type_keys} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_joypad_type_vocals}}
         {set $dx_joypad_type_vocals
            {elem {find $entry dx_joypad_type_vocals} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_joypad_pad_mapping}}
         {set $dx_joypad_pad_mapping
            {elem {find $entry dx_joypad_pad_mapping} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_sustain}}
         {set $dx_sustain
            {elem {find $entry dx_sustain} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_overshell_theme}}
         {set $dx_overshell_theme
            {elem {find $entry dx_overshell_theme} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_overshell_platform}}
         {set $dx_overshell_platform
            {elem {find $entry dx_overshell_platform} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_set_postfx}}
         {dx_set_postfx {elem {find $entry dx_set_postfx} 1}}
      }
      {if {== {elem $entry 0} {basename dx_crowd_meter_visibility}}
         {set $dx_crowd_meter_visibility
            {elem {find $entry dx_crowd_meter_visibility} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_score_meter_visibility}}
         {set $dx_score_meter_visibility
            {elem {find $entry dx_score_meter_visibility} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_song_title}}
         {set $dx_song_title
            {elem {find $entry dx_song_title} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_bpm_report}}
         {set $dx_bpm_report
            {elem {find $entry dx_bpm_report} 1}
         }
      }
      {if {== {elem $entry 0} {basename mod_blackmenu}}
         {if {== {elem {find $entry mod_blackmenu} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_blackmenu}
         }
      }
      {if {== {elem $entry 0} {basename dx_blur}}
         {set $dx_blur
            {elem {find $entry dx_blur} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_noise}}
         {set $dx_noise
            {elem {find $entry dx_noise} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_auto_endgame}}
         {set $dx_auto_endgame
            {elem {find $entry dx_auto_endgame} 1}
         }
      }
      {if {== {elem $entry 0} {basename mod_dx_left_right_jump}}
         {if {== {elem {find $entry mod_dx_left_right_jump} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_dx_left_right_jump}
         }
      }
   }
   #endif
)
#define INIT_DX_WRITER
(
   #ifndef HX_WII
   {dx_log_writer FALSE {sprint "Attempting to write DX.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {write_file DX_FILE_PATH
      {array
         (
            (mtv_position
               (mtv_position $mtvpos_0 $mtvpos_1 $mtvpos_2)
            )
            (practice_speed_control_pos
               (practice_speed_control_pos $speed_controlpos_0 $speed_controlpos_1 $speed_controlpos_2)
            )
            (practice_score_pos
               (practice_score_pos $scorepos_0 $scorepos_1 $scorepos_2)
            )
            (practice_all_item_pos
               (practice_all_item_pos $all_itempos_0 $all_itempos_1 $all_itempos_2)
            )
            (practice_section_pos
               (practice_section_pos $sectionpos_0 $sectionpos_1 $sectionpos_2)
            )
            (scoreboard_pos
               (scoreboard_pos $scoreboardpos_0 $scoreboardpos_1 $scoreboardpos_2)
            )
            (star_display_pos
               (star_display_pos $star_displaypos_0 $star_displaypos_1 $star_displaypos_2)
            )
            (gem_colors
               (gem_colors $dx_slot1_color $dx_slot2_color $dx_slot3_color $dx_slot4_color $dx_slot5_color)
            )
            (sustain_colors
               (sustain_colors $dx_sustain1_color $dx_sustain2_color $dx_sustain3_color $dx_sustain4_color $dx_sustain5_color)
            )
            (smasher_colors
               (smasher_colors $dx_fret1_color $dx_fret2_color $dx_fret3_color $dx_fret4_color $dx_fret5_color)
            )
            (drum_smasher_colors
               (drum_smasher_colors $dx_smasher1_color $dx_smasher2_color $dx_smasher3_color $dx_smasher4_color)
            )
            (drum_tom_colors
               (drum_tom_colors $dx_drum1_color $dx_drum2_color $dx_drum3_color $dx_drum4_color)
            )
            (drum_cymbal_color
               (drum_cymbal_color $dx_cymbal1_color $dx_cymbal2_color $dx_cymbal3_color $dx_cymbal4_color )
            )
            (dx_kick_color
               (dx_kick_color $dx_kick_color)
            )
            (dx_main_menu_background
               (dx_main_menu_background $dx_main_menu_background)
            )
            (emulate_fps
               (emulate_fps $emulatefps)
            )
            (track_speed
               (track_speed $trackspeed)
            )
            (song_speed
               (song_speed $speedmod)
            )
            (dx_animated_gem
               (dx_animated_gem $dx_animated_gem)
            )
            (dx_gem
               (dx_gem $dx_gem)
            )
            (dx_smasher
               (dx_smasher $dx_smasher)
            )
            (dx_crowd_meter
               (dx_crowd_meter $dx_crowd_meter)
            )
            (dx_multiplier_ring
               (dx_multiplier_ring $dx_multiplier_ring)
            )
            (dx_overdrive_bar
               (dx_overdrive_bar $dx_overdrive_bar)
            )
            (dx_rails
               (dx_rails $dx_rails)
            )
            (dx_score
               (dx_score $dx_score)
            )
            (dx_flames
               (dx_flames $dx_flames)
            )
            (dx_vocal_arrow
               (dx_vocal_arrow $dx_vocal_arrow)
            )
            (dx_vocal_highway
               (dx_vocal_highway $dx_vocal_highway)
            )
            (dx_keyboard
               (dx_keyboard $dx_keyboard)
            )
            (dx_emissive_color
               (dx_emissive_color $dx_emissive_r $dx_emissive_g $dx_emissive_b)
            )
            (dx_emissive_guitar
               (dx_emissive_guitar $dx_emissive_guitar)
            )
            (dx_emissive_bass
               (dx_emissive_bass $dx_emissive_bass)
            )
            (dx_emissive_drum
               (dx_emissive_drum $dx_emissive_drum)
            )
            (dx_emissive_keys
               (dx_emissive_keys $dx_emissive_keys)
            )
            (dx_spotlight_guitar
               (dx_spotlight_guitar $dx_spotlight_guitar)
            )
            (dx_spotlight_bass
               (dx_spotlight_bass $dx_spotlight_bass)
            )
            (dx_spotlight_drum
               (dx_spotlight_drum $dx_spotlight_drum)
            )
            (dx_spotlight_keys
               (dx_spotlight_keys $dx_spotlight_keys)
            )
            (dx_highway_guitar
               (dx_highway_guitar $dx_highway_guitar)
            )
            (dx_highway_bass
               (dx_highway_bass $dx_highway_bass)
            )
            (dx_highway_drum
               (dx_highway_drum $dx_highway_drum)
            )
            (dx_highway_keys
               (dx_highway_keys $dx_highway_keys)
            )
            (dx_multiangle
               (dx_multiangle $dx_multiangle)
            )
            (dx_fullcombo_sound
               (dx_fullcombo_sound $dx_fullcombo_sound)
            )
            (dx_jurgen_sound
               (dx_jurgen_sound $dx_jurgen_sound)
            )
            (dx_nice_sound
               (dx_nice_sound $dx_nice_sound)
            )
            (dx_song_select_noise
               (dx_song_select_noise $dx_song_select_noise)
            )
            (dx_instrument_fx
               (dx_instrument_fx $dx_instrument_fx)
            )
            (dx_long_mtv_delay
               (dx_long_mtv_delay $dx_long_mtv_delay)
            )
            (dx_set_postfx
               (dx_set_postfx $dx_postfx)
            )
            (dx_currentsong_prefix
               (dx_currentsong_prefix $dx_currentsong_prefix)
            )
            (dx_artist_mtv_line
               (dx_artist_mtv_line $dx_artist_mtv_line)
            )
            (dx_year_on_mtv
               (dx_year_on_mtv $dx_year_on_mtv)
            )
            (dx_year_on_one_mtv_line
               (dx_year_on_one_mtv_line $dx_year_on_one_mtv_line)
            )
            (dx_album_mtv_line
               (dx_album_mtv_line $dx_album_mtv_line)
            )
            (dx_song_title_mtv_line
               (dx_song_title_mtv_line $dx_song_title_mtv_line)
            )
            (dx_author_finder
               (dx_author_finder $dx_author_finder)
            )
            (dx_genre_mtv_line
               (dx_genre_mtv_line $dx_genre_mtv_line)
            )
            (dx_game_origin_mtv_line
               (dx_game_origin_mtv_line $dx_game_origin_mtv_line)
            )
            (dx_author_mtv_line
               (dx_author_mtv_line $dx_author_mtv_line)
            )
            (dx_rb3dx_venue
               (dx_rb3dx_venue
                  {if_else {&& {== $force TRUE}
                                {||
                                   {== $venue small_venues} {== $venue big_venues} {== $venue arena_venues}
                                   {== $venue festival_venues} {== $venue venues_video}
                                   {== $venue small_club_01} {== $venue small_club_02} {== $venue small_club_03}
                                   {== $venue small_club_04} {== $venue small_club_05} {== $venue small_club_06}
                                   {== $venue small_club_10} {== $venue small_club_11} {== $venue small_club_13}
                                   {== $venue small_club_14} {== $venue small_club_15} {== $venue big_club_01}
                                   {== $venue big_club_02} {== $venue big_club_04} {== $venue big_club_05}
                                   {== $venue big_club_06} {== $venue big_club_07} {== $venue big_club_08}
                                   {== $venue big_club_09} {== $venue big_club_10} {== $venue big_club_11}
                                   {== $venue big_club_12} {== $venue big_club_13} {== $venue big_club_14}
                                   {== $venue big_club_15} {== $venue big_club_17} {== $venue arena_01}
                                   {== $venue arena_02} {== $venue arena_03} {== $venue arena_04}
                                   {== $venue arena_06} {== $venue arena_07} {== $venue arena_10}
                                   {== $venue arena_11} {== $venue arena_12} {== $venue festival_01}
                                   {== $venue festival_02} {== $venue none}
                                }
                            }
                     $venue
                     FALSE
                  }
               )
            )
            (dx_joypad_type_guitar
               (dx_joypad_type_guitar $dx_joypad_type_guitar)
            )
            (dx_joypad_type_keys
               (dx_joypad_type_keys $dx_joypad_type_keys)
            )
            (dx_joypad_type_vocals
               (dx_joypad_type_vocals $dx_joypad_type_vocals)
            )
            (dx_joypad_pad_mapping
               (dx_joypad_pad_mapping $dx_joypad_pad_mapping)
            )
            (dx_sustain
               (dx_sustain $dx_sustain)
            )
            (dx_overshell_theme
               (dx_overshell_theme $dx_overshell_theme)
            )
            (dx_overshell_platform
               (dx_overshell_platform $dx_overshell_platform)
            )
            (dx_crowd_meter_visibility
               (dx_crowd_meter_visibility $dx_crowd_meter_visibility)
            )
            (dx_score_meter_visibility
               (dx_score_meter_visibility $dx_score_meter_visibility)
            )
            (dx_song_title
               (dx_song_title $dx_song_title)
            )
            (dx_bpm_report
               (dx_bpm_report $dx_bpm_report)
            )
            (mod_blackmenu
               (mod_blackmenu {modifier_mgr is_modifier_active mod_blackmenu})
            )
            (dx_blur
               (dx_blur $dx_blur)
            )
            (dx_noise
               (dx_noise $dx_noise)
            )
            (dx_auto_endgame
               (dx_auto_endgame $dx_auto_endgame)
            )
            (dx_left_right_jump
               (dx_left_right_jump {modifier_mgr is_modifier_active mod_dx_left_right_jump})
            )
         )
      }
   }
   {if_else {file_exists DX_FILE_PATH}
      {dx_passive_messenger dx_dx_written}
      {dx_passive_messenger dx_file_writing_failed}
   }
   #endif
)
#define INIT_MOD_READER
(
   #ifndef HX_WII
   {dx_log_writer FALSE {sprint "Attempting to read mod.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {dx_modifier_reader mod_static_fills}
   {dx_modifier_reader mod_chord_numbers}
   {dx_modifier_reader mod_nohud}
   {dx_modifier_reader mod_miss_sounds}
   {dx_modifier_reader mod_whammyfx}
   {dx_modifier_reader mod_practiceoverdrive}
   {dx_modifier_reader mod_nolanes}
   {dx_modifier_reader mod_rb4lanes}
   {dx_modifier_reader mod_nomv}
   {dx_modifier_reader mod_venue_swap}
   {dx_modifier_reader mod_char_swap}
   {dx_modifier_reader mod_nointro}
   {dx_modifier_reader mod_synced_track_speeds}
   {dx_modifier_reader mod_nopause}
   {dx_modifier_reader mod_skipsavemsg}
   {unless {modifier_mgr is_modifier_active mod_doublespeed}
      {dx_modifier_reader mod_doublespeed}
   }
   {unless {modifier_mgr is_modifier_active mod_dx_no_overdrive}
      {dx_modifier_reader mod_dx_no_overdrive}
   }
   #endif
)
#define INIT_MOD_WRITER
(
   #ifndef HX_WII
   {dx_log_writer FALSE {sprint "Attempting to write mod.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {write_file MOD_FILE_PATH
      {array
         (
            (mod_doublespeed
              (mod_doublespeed {modifier_mgr is_modifier_active mod_doublespeed})
            )
            (mod_static_fills
               (mod_static_fills {modifier_mgr is_modifier_active mod_static_fills})
            )
            (mod_chord_numbers
               (mod_chord_numbers {modifier_mgr is_modifier_active mod_chord_numbers})
            )
            (mod_nohud
               (mod_nohud {modifier_mgr is_modifier_active mod_nohud})
            )
            (mod_miss_sounds
               (mod_miss_sounds {! {modifier_mgr is_modifier_active mod_miss_sounds}}) ;swapped TRUE/FALSE due to modifier being on by default
            )
            (mod_whammyfx
               (mod_whammyfx {modifier_mgr is_modifier_active mod_whammyfx})
            )
            (mod_practiceoverdrive
               (mod_practiceoverdrive {modifier_mgr is_modifier_active mod_practiceoverdrive})
            )
            (mod_nolanes
               (mod_nolanes {modifier_mgr is_modifier_active mod_nolanes})
            )
            (mod_rb4lanes
               (mod_rb4lanes {modifier_mgr is_modifier_active mod_rb4lanes})
            )
            (mod_nomv
               (mod_nomv {modifier_mgr is_modifier_active mod_nomv})
            )
            (mod_venue_swap
               (mod_venue_swap {modifier_mgr is_modifier_active mod_venue_swap})
            )
            (mod_char_swap
               (mod_char_swap {modifier_mgr is_modifier_active mod_char_swap})
            )
            (mod_nointro
               (mod_nointro {modifier_mgr is_modifier_active mod_nointro})
            )
            (mod_synced_track_speeds
               (mod_synced_track_speeds {modifier_mgr is_modifier_active mod_synced_track_speeds})
            )
            (mod_nopause
               (mod_nopause {modifier_mgr is_modifier_active mod_nopause})
            )
            (mod_skipsavemsg
               (mod_skipsavemsg {modifier_mgr is_modifier_active mod_skipsavemsg})
            )
            (mod_dx_no_overdrive
               (mod_dx_no_overdrive {modifier_mgr is_modifier_active mod_dx_no_overdrive})
            )
         )
      }
   }
   {if_else {file_exists MOD_FILE_PATH}
      {dx_passive_messenger dx_mod_written}
      {dx_passive_messenger dx_file_writing_failed}
   }
   #endif
)
#define INIT_VAL_READER
(
   #ifndef HX_WII
   {dx_log_writer FALSE {sprint "Attempting to read val.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {foreach $entry {read_file VAL_FILE_PATH}
      {if {== {elem $entry 0} {basename mic_vols}}
         {set $mic_vol_1
            {elem {find $entry mic_vols} 1}
         }
         {set $mic_vol_2
            {elem {find $entry mic_vols} 2}
         }
         {set $mic_vol_3
            {elem {find $entry mic_vols} 3}
         }
      }
      {if {== {elem $entry 0} {basename default_slot0}}
         {set $default_slot0
            {elem {find $entry default_slot0} 1}
         }
      }
      {if {== {elem $entry 0} {basename default_slot1}}
         {set $default_slot1
            {elem {find $entry default_slot1} 1}
         }
      }
      {if {== {elem $entry 0} {basename default_slot2}}
         {set $default_slot2
            {elem {find $entry default_slot2} 1}
         }
      }
      {if {== {elem $entry 0} {basename default_slot3}}
         {set $default_slot3
            {elem {find $entry default_slot3} 1}
         }
      }
   }
   #endif
)
#define INIT_VAL_WRITER
(
   #ifndef HX_WII
   {dx_log_writer FALSE {sprint "Attempting to write val.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {write_file VAL_FILE_PATH
      {array
         (
            (mic_vols
               (mic_vols {profile_mgr get_mic_vol 0} {profile_mgr get_mic_vol 1} {profile_mgr get_mic_vol 2})
            )
            (default_slot0
               (default_slot0 $default_slot0)
            )
            (default_slot1
               (default_slot1 $default_slot1)
            )
            (default_slot2
               (default_slot2 $default_slot2)
            )
            (default_slot3
               (default_slot3 $default_slot3)
            )
         )
      }
   }
   ;{dx_passive_messenger dx_val_written}
   #endif
)
#define DX_LOG_CLEAR
(
   {if {file_exists LOG_FILE_PATH}
      {write_file PREV_LOG_FILE_PATH {read_file LOG_FILE_PATH}}
      {set $dx_log_reader ("start of log")}
      {write_file LOG_FILE_PATH {array $dx_log_reader}}
   }
)
#define DX_CURRENT_SONG_CLEAR
(
   {do
      {set $dx_current_song FALSE}
      {set $dx_current_song ("No Song Loaded")}
      {write_file CURRENT_SONG_TXT_FILE_PATH {array $dx_current_song}}
   }
)
#define DX_CURRENT_SONG_WRITER
(
   #ifndef HX_WII
   {set $dx_current_song ()}
   {resize $dx_current_song 0}
   {if_else $dx_currentsong_prefix
      {do
         {if $dx_song_title_mtv_line
            {push_back $dx_current_song {sprint "Song: " $song_title}}
         }
         {if_else {&& $dx_year_on_mtv $dx_year_on_one_mtv_line}
            {push_back $dx_current_song {sprint "Artist: " $artistvar ", " $yearvar}}
            {push_back $dx_current_song {sprint "Artist: " $artistvar}}
         }
         {if $dx_album_mtv_line
            {push_back $dx_current_song {sprint "Album: " $albumvar}}
         }
         {if $dx_genre_mtv_line
            {push_back $dx_current_song {sprint "Genre: " {localize $genrevar}}}
         }
         {if {&& $dx_year_on_mtv {! $dx_year_on_one_mtv_line}}
            {push_back $dx_current_song {sprint "Year: " $yearvar}}
         }
         {if $dx_game_origin_mtv_line
            {push_back $dx_current_song {sprint "Source: " {localize $sourcevar}}}
         }
         {if $dx_author_mtv_line
            {if $authorvar
               {push_back $dx_current_song {sprint "Author: " $authorvar}}
            }
         }
      }
      {do
         {if $dx_song_title_mtv_line
            {push_back $dx_current_song {sprint "Song: " $song_title}}
         }
         {if_else {&& $dx_year_on_mtv $dx_year_on_one_mtv_line}
            {push_back $dx_current_song {sprint $artistvar ", " $yearvar}}
            {push_back $dx_current_song $artistvar}
         }
         {if $dx_album_mtv_line
            {push_back $dx_current_song $albumvar}
         }
         {if $dx_genre_mtv_line
            {push_back $dx_current_song {localize $genrevar}}
         }
         {if {&& $dx_year_on_mtv {! $dx_year_on_one_mtv_line}}
            {push_back $dx_current_song $yearvar}
         }
         {if $dx_game_origin_mtv_line
            {push_back $dx_current_song {localize $sourcevar}}
         }
         {if $dx_author_mtv_line
            {if $authorvar
               {push_back $dx_current_song $authorvar}
            }
         }
      }
   }
   {write_file CURRENT_SONG_TXT_FILE_PATH
      {array
         $dx_current_song
      }
   }
   #endif
)
#define DX_JSON_CLEAR
(
   {do
      {set $dx_current_song ()}
      {resize $dx_current_song 0}
      {write_file CURRENT_SONG_JSON_FILE_PATH {array $dx_current_song}}
   }
)
#define DX_JSON_WRITER
(
   #ifndef HX_WII
   {set $dx_current_song ()}
   {resize $dx_current_song 0}
   {push_back $dx_current_song {sprint "{" "\q" "Playlist" "\q" ":" "\q\q" "\q" "," "\q" "SubPlaylist" "\q" ":" "\q" "\q" "," "\q" "IsModChart" "\q" ":" "false" ","
   "\q" "SelectedInstruments" "\q" ":" "[" 
   "{" "\q" "active" "\q" ":" $guitarplayeractive "," "\q" "instrument" "\q" ":" "\q" "GUITAR" "\q" "," "\q" "difficulty" "\q" ":" "\q" $guitarrankvar "\q" "}" ","
   "{" "\q" "active" "\q" ":" $real_guitarplayeractive "," "\q" "instrument" "\q" ":" "\q" "REAL_GUITAR" "\q" "," "\q" "difficulty" "\q" ":" "\q" $real_guitarrankvar "\q" "}" ","
   "{" "\q" "active" "\q" ":" $drumplayeractive "," "\q" "instrument" "\q" ":" "\q" "DRUMS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $drumrankvar "\q" "}" ","
   "{" "\q" "active" "\q" ":" $vocalsplayeractive "," "\q" "instrument" "\q" ":" "\q" "VOCALS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $vocalsrankvar "\q" "}" ","
   "{" "\q" "active" "\q" ":" $bassplayeractive "," "\q" "instrument" "\q" ":" "\q" "BASS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $bassrankvar "\q" "}" ","
   "{" "\q" "active" "\q" ":" $real_bassplayeractive "," "\q" "instrument" "\q" ":" "\q" "REAL_BASS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $real_bassrankvar "\q" "}" ","
   "{" "\q" "active" "\q" ":" $keysplayeractive "," "\q" "instrument" "\q" ":" "\q" "KEYS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $keysrankvar "\q" "}" ","
   "{" "\q" "active" "\q" ":" $real_keysplayeractive "," "\q" "instrument" "\q" ":" "\q" "REAL_KEYS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $real_keysrankvar "\q" "}" "]" ","
   "\q" "HasLyrics" "\q" ":" "false" "," "\q" "VideoStartOffset" "\q" ":" 0 "," "\q" "CacheRoot" "\q" ":" "\q" "FakePath" "\q" "," "\q" "DrumType" "\q" ":" "0" ","
   "\q" "Name" "\q" ":" "\q" $song_title "\q" "," "\q" "NameNoParenthesis" "\q" ":" "\q" $song_title "\q" "," "\q" "Artist" "\q" ":" "\q" $artistvar "\q" ","
   "\q" "Charter" "\q" ":" "\q" $authorvar "\q" "," "\q" "IsMaster" "\q" ":" $mastervar "," "\q" "Album" "\q" ":" "\q" $albumvar "\q" "," "\q" "AlbumTrack" "\q" ":" 3 ","
   "\q" "PlaylistTrack" "\q" ":" "0" "," "\q" "Genre" "\q" ":" "\q" $genrevar "\q" "," "\q" "Year" "\q" ":" "\q" $yearvar "\q" "," "\q" "SongLength" "\q" ":" "231271" ","
   "\q" "SongLengthTimeSpan" "\q" ":" "\q" "00:03:51.2710000" "\q" "," "\q" "PreviewStart" "\q" ":" "53454" "," "\q" "PreviewStartTimeSpan" "\q" ":" "\q" "00:00:53.4540000" "\q" ","
   "\q" "PreviewEnd" "\q" ":" "-1" "," "\q" "PreviewEndTimeSpan" "\q" ":" "\q" "-00:00:00.0010000" "\q" "," "\q" "Delay" "\q" ":" "0.0" "," "\q" "LoadingPhrase" "\q" ":" "\q" "\q" ","
   "\q" "HopoThreshold" "\q" ":" "170" "," "\q" "EighthNoteHopo" "\q" ":" "false" "," "\q" "MultiplierNote" "\q" ":" "116" "," "\q" "Source" "\q" ":" "\q" $sourcevar "\q" ","
   "\q" "PartDifficulties" "\q" ":" "{" "\q" "GUITAR" "\q" ":" $guitarrankvar "," "\q" "GUITAR_COOP" "\q" ":" "-1" "," "\q" "REAL_GUITAR" "\q" ":" $real_guitarrankvar ","
   "\q" "RHYTHM" "\q" ":" "-1" "," "\q" "BASS" "\q" ":" $bassrankvar "," "\q" "REAL_BASS" "\q" ":" $real_bassrankvar "," "\q" "DRUMS" "\q" ":" $drumrankvar ","
   "\q" "GH_DRUMS" "\q" ":" "-1" "," "\q" "REAL_DRUMS" "\q" ":" "-1" "," "\q" "KEYS" "\q" ":" $keysrankvar "," "\q" "REAL_KEYS" "\q" ":" $real_keysrankvar ","
   "\q" "VOCALS" "\q" ":" $vocalsrankvar "," "\q" "HARMONY" "\q" ":" $vocalsrankvar "}" "," "\q" "BandDifficulty" "\q" ":" $bandrankvar "," "\q" "AvailableParts" "\q" ":" "1030793138175" ","
   "\q" "VocalParts" "\q" ":" "3" "," "\q" "Checksum" "\q" ":" "\q" "C89E28F4C0987A33859ECB9DC06748EDC49B567B" "\q" "," "\q" "NotesFile" "\q" ":" "\q" "notes.mid" "\q" "," "\q" "Location" "\q" ":" "\q" "FakePath" "\q" "}"}}
   {write_file CURRENT_SONG_JSON_FILE_PATH
      {array
         $dx_current_song
      }
   }
   #endif
)
#define DX_SONG_CACHE
(
   {set $dx_song_cache_holder
      (
         #include ../../songs/missing_song_data.dta
      )
   }
   ;{dx_log_writer TRUE $dx_song_cache_holder}
)
#define DX_RAW_SONG_CACHE
(
   {set $dx_raw_song_cache_holder
      (
         #include ../../songs/dta_collection/mega_songs_data.dta
      )
   }
   ;{dx_log_writer TRUE $dx_raw_song_cache_holder}
)